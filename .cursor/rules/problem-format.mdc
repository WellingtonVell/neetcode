---
description: "LeetCode problem formatting guidelines for problem.md files"
globs: **/problem.md
alwaysApply: false
---

# LeetCode Problem Format Guidelines

All `problem.md` files must follow the standardized template format defined in [templates/problem.md](mdc:templates/problem.md).

## Required Structure

### 1. Frontmatter

```yaml
---
title: Problem Title
leetcode_id: XXX
difficulty: üü¢|üü°|üî¥|üíÄ
category: Arrays & Hashing|Two Pointers|etc
status: üóíÔ∏è|üë£|‚úîÔ∏è|üîç
tags: [tag1, tag2]
companies: [company1, company2, company3]
related_problems: [XXX, YYY, ZZZ]
---
```

### 2. Problem Title

```markdown
# XXX. [leetcode_id. Problem Title](https://leetcode.com/problems/problem-slug/description/) [[README|üè†]]
```

### 3. Problem Statement Section

```markdown
## üìù Problem Statement

[Problem description goes here]

---
```

### 4. Examples (Using Obsidian Callouts)

```markdown
> [!example]- Example 1
>
> **Input:**  
> `input_here`
>
> **Output:**  
> `output_here`
>
> **Explanation:**  
> Explanation text here

> [!example]- Example 2
> [Same format as Example 1]
```

### 5. Constraints (Using Warning Callout)

```markdown
> [!warning]- Constraints
>
> - Constraint 1
> - Constraint 2
> - Constraint 3
```

### 6. Optional Follow Up

```markdown
> [!info]- Follow Up (Optional)
>
> **Question:** Follow up question here
>
> **Answer:** Answer to follow up
```

### 7. Solutions Section

```markdown
---

## üõ†Ô∏è Solutions [[README|üè†]]

### Approach 1: [Approach Name]

- **Time Complexity:** O(...)
- **Space Complexity:** O(...)
- **Pattern:** Pattern description

### Approach 2: [Optional Second Approach]

- **Time Complexity:** O(...)
- **Space Complexity:** O(...)
- **Pattern:** Pattern description
```

### 8. Key Insights Section

```markdown
---

## üîë Key Insights [[README|üè†]]

- üß† **Pattern Recognition:** [Insight about pattern recognition]
- üîß **Data Structure:** [Insight about data structures used]
- ‚ö° **Optimization:** [Insight about optimizations]
- üéØ **Edge Cases:** [Important edge cases to consider]
```

#### 9. üíª Implementations

```markdown
---

#### üíª Implementations [[README|üè†]]

![[folder-path/problem-id/solve.ts#TypeScript Solution]]

![[folder-path/problem-id/solve.go#Go Solution]]
```

## Formatting Rules

1. **Emojis in Headers:** Use consistent emojis for each section type

   - üìù for Problem Statement
   - üõ†Ô∏è for Solutions
   - üîë for Key Insights
   - üíª for Implementations

2. **Obsidian Callouts:** Use collapsible callouts for examples, constraints, and follow-ups

   - `> [!example]- Example X` for examples
   - `> [!warning]- Constraints` for constraints
   - `> [!info]- Follow Up` for follow-up questions

3. **Horizontal Rules:** Use `---` to separate major sections for visual clarity

4. **Links:**

   - Use `[[internal-links]]` for internal navigation
   - Use standard markdown links for external LeetCode URLs
   - Include home navigation at keys points: `[[README|üè†]]`

5. **Code Blocks:** Use backticks for inline code and proper embedding syntax for solution files

6. **Consistency:** Maintain consistent formatting across all problem files for better navigation and readability in Obsidian

## Pattern Integration

Reference existing pattern files:

- [XXXX](mdc:patterns/xxxxx.md)

This ensures proper cross-linking and knowledge graph connectivity within the vault.
